[project]
name = "garminconnect"
version = "0.2.29"
description = "Python 3 API wrapper for Garmin Connect"
authors = [
    {name = "Ron Klinkien", email = "ron@cyberjunky.nl"},
]
dependencies = [
    "garth>=0.5.13,<0.6.0",
]
readme = "README.md"
license = {text = "MIT"}
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "License :: OSI Approved :: MIT License",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Operating System :: OS Independent",
]
keywords=["garmin connect", "api", "garmin"]
requires-python=">=3.10"
[project.urls]
"Homepage" = "https://github.com/cyberjunky/python-garminconnect"
"Issues" = "https://github.com/cyberjunky/python-garminconnect/issues"
"Changelog" = "https://github.com/cyberjunky/python-garminconnect/releases"

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool.pytest.ini_options]
addopts = "--ignore=__pypackages__ --ignore-glob=*.yaml"

[tool.mypy]
ignore_missing_imports = true
python_version = "3.10"
disallow_untyped_defs = true
warn_unused_ignores = true

[tool.isort]
profile = "black"
line_length = 88
known_first_party = "garminconnect"

[project.optional-dependencies]
dev = [
    "ipython",
    "ipdb",
    "ipykernel",
    "pandas",
    "matplotlib",
]
linting = [
    "black",
    "ruff",
    "mypy",
    "isort",
    "types-requests",
]
testing = [
    "coverage",
    "pytest",
    "pytest-vcr",
]
example = [
    "garth>=0.5.13,<0.6.0",
    "requests",
    "readchar",
]

[tool.pdm]
distribution = true

[tool.pdm.python]
path = ".venv/bin/python"

[tool.ruff]
line-length = 88
target-version = "py310"
exclude = [
    ".git",
    ".venv", 
    "__pycache__",
    ".pytest_cache",
    "build",
    "dist",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
unfixable = []  # Allow all fixes, including unsafe ones

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["ARG", "S101"]

[tool.coverage.run]
source = ["garminconnect"]
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == \"__main__\":",
    "@(abc\\.)?abstractmethod",
]
[tool.pdm.scripts]
# Development workflow
install = "pdm install --group :all"
format = {composite = ["pdm run isort . --skip-gitignore", "pdm run black -l 88 .", "pdm run ruff check . --fix --unsafe-fixes"]}
lint = {composite = ["pdm run isort --check-only . --skip-gitignore", "pdm run ruff check .", "pdm run black -l 88 . --check --diff", "pdm run mypy garminconnect tests"]}
test = {env = {GARMINTOKENS = "~/.garminconnect"}, cmd = "pdm run coverage run -m pytest -v --durations=10"}
testcov = {composite = ["test", "pdm run coverage html", "pdm run coverage xml -o coverage/coverage.xml"]}
codespell = "pre-commit run codespell --all-files"
clean = "python -c \"import shutil, pathlib; [shutil.rmtree(p, ignore_errors=True) for p in pathlib.Path('.').rglob('__pycache__')]; [p.unlink(missing_ok=True) for p in pathlib.Path('.').rglob('*.py[co]')]\""

# Publishing
build = "pdm build"
publish = {composite = ["build", "pdm publish"]}

# VCR cassette management
record-vcr = {env = {GARMINTOKENS = "~/.garminconnect"}, cmd = "pdm run pytest tests/test_garmin.py -v --vcr-record=new_episodes"}
clean-vcr = "rm -f tests/cassettes/*.yaml"
reset-vcr = {composite = ["clean-vcr", "record-vcr"]}

# Quality checks  
all = {composite = ["lint", "codespell", "test"]}

[tool.pdm.dev-dependencies]
dev = [
    "ipython",
    "ipdb",
    "ipykernel",
    "pandas",
    "matplotlib",
]
linting = [
    "black",
    "ruff",
    "mypy",
    "isort",
    "types-requests",
    "pre-commit",
    "codespell",
]
testing = [
    "coverage",
    "pytest",
    "pytest-vcr",
]
example = [
    "readchar",
]
