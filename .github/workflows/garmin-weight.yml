name: Garmin weight upload (Drive → Garmin)

on:
  workflow_dispatch: {}
  schedule:
    - cron: "30 21 * * *"   # KST 06:30

jobs:
  upload:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install rclone
        run: |
          curl -fsSL https://rclone.org/install.sh | sudo bash

      - name: Write service account JSON
        shell: bash
        run: |
          cat > sa.json <<'JSON'
          ${{ secrets.GDRIVE_SA_JSON }}
          JSON

      - name: Create rclone config (root_folder_id pinned)
        env:
          FOLDER_ID: ${{ secrets.GDRIVE_FOLDER_ID }}
        run: |
          cat > rclone.conf << EOF
          [gdrive]
          type = drive
          scope = drive.readonly
          service_account_file = ${PWD}/sa.json
          root_folder_id = ${FOLDER_ID}
          EOF

      - name: DEBUG - List files (name,size,modtime)
        env:
          RCLONE_CONFIG: ${{ github.workspace }}/rclone.conf
        run: |
          rclone lsl gdrive: || true

      - name: Download all (export Sheets→CSV)
        env:
          RCLONE_CONFIG: ${{ github.workspace }}/rclone.conf
        run: |
          set -e
          rclone copy gdrive: . --drive-export-formats csv --progress
          echo "Workspace files:"
          ls -al
          echo "CSV files present:"
          ls -al *.csv || true
          echo "===== SHOW FIRST 5 LINES OF LATEST CSV ====="
          ls -t *.csv | head -n 1 | xargs -I{} sh -c 'echo ">>> {}"; head -n 5 "{}"'

      - name: Restore Garmin token cache (~/.garminconnect)
        id: restore_token
        uses: actions/cache/restore@v4
        with:
          path: ~/.garminconnect
          key: garmin-token-v1

      # ⬇️ 진단을 위해 DRY_RUN=1 로 1회 실행 (업로드 대신 파싱/타임스탬프만 출력)
      - name: Upload to Garmin (diagnostic dry run)
        env:
          GARMIN_EMAIL: ${{ secrets.GARMIN_EMAIL }}
          GARMIN_PASSWORD: ${{ secrets.GARMIN_PASSWORD }}
          DRY_RUN: "1"
        run: |
          python garmin_weight_uploader.py

      - name: Save Garmin token cache (first run only)
        if: steps.restore_token.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ~/.garminconnect
          key: garmin-token-v1
