name: Garmin weight upload (Drive → Garmin)

on:
  workflow_dispatch: {}
  schedule:
    # 매일 KST 06:30 → UTC 기준 전날 21:30
    - cron: "30 21 * * *"

jobs:
  upload:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install rclone
        run: |
          curl -fsSL https://rclone.org/install.sh | sudo bash

      - name: Write service account JSON
        run: |
          echo "${{ secrets.GDRIVE_SA_JSON }}" > sa.json

      - name: Create rclone config for Drive (service account)
        run: |
          cat > rclone.conf << 'EOF'
          [gdrive]
          type = drive
          scope = drive.readonly
          service_account_file = sa.json
          team_drive =
          root_folder_id =
          EOF

      - name: Download latest CSV from Drive folder
        env:
          RCLONE_CONFIG: ${{ github.workspace }}/rclone.conf
          FOLDER_ID: ${{ secrets.GDRIVE_FOLDER_ID }}
        run: |
          # List files (path + modtime), filter CSV, sort by time, pick latest
          rclone lsf "gdrive:{${FOLDER_ID}}" --files-only --format "pt" --recursive \
            | grep -E '\.csv$' \
            | sort -k2 \
            | tail -n 1 \
            | awk '{print $1}' > latest.txt

          if [ ! -s latest.txt ]; then
            echo "No CSV found in Drive folder."
            exit 1
          fi

          LATEST_FILE=$(cat latest.txt)
          echo "Latest CSV in Drive: $LATEST_FILE"
          rclone copy "gdrive:{${FOLDER_ID}}/$LATEST_FILE" . --progress

          echo "Downloaded:"
          ls -al "무게 "*.csv || true

      - name: Restore Garmin token cache (~/.garminconnect)
        id: restore_token
        uses: actions/cache/restore@v4
        with:
          path: ~/.garminconnect
          key: garmin-token-v1

      - name: Upload to Garmin
        env:
          GARMIN_EMAIL: ${{ secrets.GARMIN_EMAIL }}
          GARMIN_PASSWORD: ${{ secrets.GARMIN_PASSWORD }}
        run: |
          python garmin_weight_uploader.py

      - name: Save Garmin token cache (first run only)
        if: steps.restore_token.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ~/.garminconnect
          key: garmin-token-v1
