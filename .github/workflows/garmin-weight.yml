name: Garmin weight upload (Drive → Garmin)

on:
  workflow_dispatch: {}
  schedule:
    # 매일 KST 06:30 → UTC 기준 전날 21:30
    - cron: "30 21 * * *"

jobs:
  upload:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install rclone
        run: |
          curl -fsSL https://rclone.org/install.sh | sudo bash

      # 서비스 계정 JSON을 안전하게 기록 (heredoc)
      - name: Write service account JSON
        shell: bash
        run: |
          cat > sa.json <<'JSON'
          ${{ secrets.GDRIVE_SA_JSON }}
          JSON

      # JSON 구조 검증
      - name: Validate service account JSON (quick)
        run: |
          head -c 1 sa.json | grep '{' >/dev/null || (echo "sa.json is not starting with {" && exit 1)

      - name: Validate JSON with Python
        run: |
          python - <<'PY'
          import json
          json.load(open('sa.json','r', encoding='utf-8'))
          print("JSON OK")
          PY

      - name: Create rclone config for Drive (service account)
        run: |
          cat > rclone.conf << 'EOF'
          [gdrive]
          type = drive
          scope = drive.readonly
          service_account_file = sa.json
          EOF

      # 🔁 폴더 전체 복사: 스프레드시트는 CSV로 내보내기(export)하여 모두 다운로드
      #    → 로컬에서 *.csv 중 최신 1개를 파이썬이 선택
      - name: Download all files from Drive folder (export Sheets→CSV)
        env:
          RCLONE_CONFIG: ${{ github.workspace }}/rclone.conf
          FOLDER_ID: ${{ secrets.GDRIVE_FOLDER_ID }}
        run: |
          set -e
          echo "Using Drive folder id: ${FOLDER_ID}"

          # 폴더를 루트로 지정하고 그 하위 전체를 현재 작업 디렉토리로 복사
          rclone copy gdrive:/ . \
            --drive-root-folder-id "${FOLDER_ID}" \
            --drive-shared-with-me \
            --drive-export-formats csv \
            --progress

          echo "Workspace files after download:"
          ls -al || true

          echo "CSV files present:"
          ls -al *.csv || true

      - name: Restore Garmin token cache (~/.garminconnect)
        id: restore_token
        uses: actions/cache/restore@v4
        with:
          path: ~/.garminconnect
          key: garmin-token-v1

      - name: Upload to Garmin
        env:
          GARMIN_EMAIL: ${{ secrets.GARMIN_EMAIL }}
          GARMIN_PASSWORD: ${{ secrets.GARMIN_PASSWORD }}
        run: |
          python garmin_weight_uploader.py

      - name: Save Garmin token cache (first run only)
        if: steps.restore_token.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ~/.garminconnect
          key: garmin-token-v1
