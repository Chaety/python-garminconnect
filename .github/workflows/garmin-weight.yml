name: Garmin weight upload (Drive ‚Üí Garmin)

on:
  workflow_dispatch: {}
  schedule:
    # Îß§Ïùº KST 06:30 ‚Üí UTC Í∏∞Ï§Ä Ï†ÑÎÇ† 21:30
    - cron: "30 21 * * *"

jobs:
  upload:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install rclone
        run: |
          curl -fsSL https://rclone.org/install.sh | sudo bash

      # ÏÑúÎπÑÏä§ Í≥ÑÏ†ï JSONÏùÑ ÏïàÏ†ÑÌïòÍ≤å Í∏∞Î°ù (heredoc, ÏõêÎ¨∏ Í∑∏ÎåÄÎ°ú)
      - name: Write service account JSON
        shell: bash
        run: |
          cat > sa.json <<'JSON'
          ${{ secrets.GDRIVE_SA_JSON }}
          JSON

      # JSON Íµ¨Ï°∞ Í≤ÄÏ¶ù
      - name: Validate service account JSON (quick)
        run: |
          head -c 1 sa.json | grep '{' >/dev/null || (echo "sa.json is not starting with {" && exit 1)

      - name: Validate JSON with Python
        run: |
          python - <<'PY'
          import json
          json.load(open('sa.json','r', encoding='utf-8'))
          print("JSON OK")
          PY

      - name: Create rclone config for Drive (service account)
        run: |
          cat > rclone.conf << 'EOF'
          [gdrive]
          type = drive
          scope = drive.readonly
          service_account_file = sa.json
          EOF

      # üîé Ìè¥Îçî Ïïà ÌååÏùº Î™©Î°ùÏùÑ Î®ºÏ†Ä Ï∞çÏñ¥Î≥¥Î©∞ Ï†ëÍ∑º ÌôïÏù∏ (ÎîîÎ≤ÑÍ∑∏Ïö©)
      - name: DEBUG - List files under folder root
        env:
          RCLONE_CONFIG: ${{ github.workspace }}/rclone.conf
          FOLDER_ID: ${{ secrets.GDRIVE_FOLDER_ID }}
        run: |
          echo "Using Drive folder id: ${FOLDER_ID}"
          echo "Listing (name + modtime) recursively..."
          rclone lsf "gdrive:/" \
            --drive-root-folder-id "${FOLDER_ID}" \
            --drive-shared-with-me \
            --format "pt" --files-only --recursive || true

      - name: Download latest CSV from Drive folder
        env:
          RCLONE_CONFIG: ${{ github.workspace }}/rclone.conf
          FOLDER_ID: ${{ secrets.GDRIVE_FOLDER_ID }}
        run: |
          set -e
          echo "Using Drive folder id: ${FOLDER_ID}"

          # ÏµúÏã† CSV (Í≤ΩÎ°ú, ÏàòÏ†ïÏãúÍ∞Å) Î™©Î°ù ‚Üí ÏµúÏã† 1Í∞ú ÏÑ†ÌÉù
          rclone lsf "gdrive:/" \
            --drive-root-folder-id "${FOLDER_ID}" \
            --drive-shared-with-me \
            --format "pt" --files-only --recursive \
            | grep -E '\.csv$' \
            | sort -k2 \
            | tail -n 1 \
            | awk '{print $1}' > latest.txt || true

          if [ ! -s latest.txt ]; then
            echo "No CSV found in Drive folder."
            exit 1
          fi

          LATEST_FILE=$(cat latest.txt)
          echo "Latest CSV (relative to folder root): $LATEST_FILE"

          # ÏÑ†ÌÉùÎêú ÌååÏùº Îã§Ïö¥Î°úÎìú (Ìè¥Îçî IDÎ•º Î£®Ìä∏Î°ú ÏßÄÏ†ï)
          rclone copy "gdrive:${LATEST_FILE}" . \
            --drive-root-folder-id "${FOLDER_ID}" \
            --drive-shared-with-me \
            --progress

          echo "Downloaded files in workspace:"
          ls -al

          echo "Downloaded CSVs matching pattern:"
          ls -al "Î¨¥Í≤å "*.csv || true

      - name: Restore Garmin token cache (~/.garminconnect)
        id: restore_token
        uses: actions/cache/restore@v4
        with:
          path: ~/.garminconnect
          key: garmin-token-v1

      - name: Upload to Garmin
        env:
          GARMIN_EMAIL: ${{ secrets.GARMIN_EMAIL }}
          GARMIN_PASSWORD: ${{ secrets.GARMIN_PASSWORD }}
        run: |
          python garmin_weight_uploader.py

      - name: Save Garmin token cache (first run only)
        if: steps.restore_token.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ~/.garminconnect
          key: garmin-token-v1
